@{
    ViewData["Title"] = "deploy2.org | GitHub to Salesforce";
}

    <div class="jumbotron">
        <h1 class="text-center font-weight-light">Deploy Lightning Components to your Salesforce Org</h1>
        <hr class="my-4">
        <div class="d-flex justify-content-around align-items-center">
            <span class="icon-home"><i class="fab fa-github" style="color:#4078c0"></i></span>

            <span class='the-arrow -right'>
                <span class='shaft'></span>
            </span>

            <span class="icon-home"><i class="fad fa-rocket-launch" style="color:#4078c0"></i></span>

            <span class='the-arrow -right'>
                <span class='shaft'></span>
            </span>

            <span class="icon-home"><i class="fab fa-salesforce" style="color:#21a0df"></i></span>
        </div>
    </div>

    <div class="markdown-body">
        <h2>GitHub</h2>
        <p>To use the service you need to include the <img src="~/dist/deploy2org.svg" /> button in your <code>README</code> file and the create a <code>.deploy2org.json</code> file in the root folder of your repository.</p>
        <p>1. Add the following code to your <code>README</code>:</p>
        <pre>[![Deploy](https://deploy2.org/dist/deploy2org.svg)](https://deploy2.org/deploy)</pre>
        <p>If you want to use the button from outside of your GitHub repository, include the path to your repository as follows:</p>
        <pre>[![Deploy](https://deploy2.org/dist/DeployToSFDX.svg)](https://deploy2.org/deploy?template=Chaos-Tech-Corp/Input-Field-Lookup)</pre>
        <p>2. Create a <code>.deploy2org.json</code> file:</p>
        <pre>
{
    "component_name": "lookupField",
    "api_version": "v47.0",
    "apex_class": ["/src/lookupfieldController.apxc"],
    "events": null,
    "bundle_details": {
        "component": "/src/lookupField.cmp",
        "controller": "/src/lookupField.js",
        "helper": "/src/lookupField.helper",
        "style": "/src/lookupField.css",
        "documentation": null,
        "renderer": null, 
        "design": null, 
        "svg": null
    }
}
        </pre>

        <h2>deploy2.org</h2>
        <p>First step is to validate the <code>.deploy2org.js</code> file and that all the files exists and can be retrieved.</p>
        <img src="~/img/deploy_step_2.png" style="max-width:100%;" />
        <p>Then the application will connect to your Organization's Sandbox to start deploying the data. It uses a Connected Applicaiton named <code>Deploy2Org</code> and will require the user permission.</p>
        <p>You can find information about how to check your Connected Apps <a href="https://help.salesforce.com/articleView?id=remoteaccess_request_manage.htm" target="_blank">here</a>.</p>
        <p>Once the permission is granted tt will start by creating the Apex Classes (if any), followed by the Ligtning Component Bundle.</p>
        <p>Apex Classes are being generated one by one (<i>pending work to validated if they exist before uploading them</i>) using a <a href="https://developer.salesforce.com/docs/api-explorer/sobject/ApexClass/post-apexclass" target="_blank">REST API</a> call:</p>
        <pre>
POST /services/data/vXX.X/sobjects/ApexClass
</pre>
        <p>The Component Bundle is created all at once using a <a href="https://developer.salesforce.com/docs/atlas.en-us.api_tooling.meta/api_tooling/tooling_resources_composite_composite.htm" target="_blank">Composite Request</a> to the Tooling REST API:</p>
        <pre>
POST /services/data/vXX.X/tooling/composite
</pre>
        <img src="~/img/deploy_step_3.png" style="max-width:100%;" />
    </div>